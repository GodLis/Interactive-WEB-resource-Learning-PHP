<?php include_once("header.php");
session_destroy();
?>

    <div class="mypadding" style="text-align: justify">

        <div class="h1" style="text-align: center">
            Встановлення та налаштування
        </div>
        <div>
            <div class="h2" style="text-align: center">
                Вбудований web-сервер
            </div>
            <div>
                <p>
                    Ви можете почати вивчення PHP без необхідності у встановленні та конфігурації повноцінного веб-сервера
                    (Необхідний PHP 5.4 або новіше). Для запуску сервера, запустіть наступну команду із вашого терміналу
                    в корені вашого проекту:
                </p>
                    <code>
                        php -S localhost:8000
                    </code>

            </div>

            <div class="h2" style="text-align: center">
                Встановлення на Mac
            </div>
            <div>
                <p>
                    OSX іде разом з вбудованим PHP, та зазвичай його версія трохи відстає від останньої стабільної.
                    Lion постачається з PHP 5.3.6 а Mountain Lion з 5.3.10.
                </p>
                <p>
                    Ви можете обновити PHP на OSX через кілька менеджерів пакетів, з рекомендованим php-osx by Liip.
                </p>
                <p>>
                    Інший варіант скомпілювати самостійно. В цьому випадку ви повинні впевнитися,
                    що у вас встановлений Xcode, або його аналог від Apple “Інструменти командного рядка для Xcode”,
                    їх можна скачати з Apple’s Mac Developer Center.
                </p>
                <p>
                    Для повного набору “все-в-одному”, включаючи PHP, веб-сервер Apache, та базу даних MySQL з
                    хорошим графічним інтерфейсом, спробуйте MAMP.
                </p>
            </div>

            <div class="h2" style="text-align: center">
                Встановлення у Windows
            </div>
            <div>
                <p>
                    PHP для Windows доступний в кількох видах. Ви можете скачати бінарні файли і до недавнього часу
                    могли використовувати встановлювач ‘.msi’. Встановлювач більше не підтримується починаючи з
                    версії PHP 5.3.0.
                </p>
                <p>
                    Для навчання та локальної розробки ви можете використовувати вбудований вебсервер із PHP 5.4
                    отож вам не потрібно хвилюватись за його конфугурування. Якщо ви хочете використовувати пакет
                    “все-в-одному” котрий включає вебсервер та MySQL також тоді інструменти такі як Web Platform Installer,
                    XAMPP та WAMP допоможуть вам швидко отримати готове середовище для розробки на Windows.
                    Тим не менше, ці інструменти мають певні відмінності від production тож не забувайте про ці особливості,
                    коли ви працюєте в Windows, а розгортання відбувається в Linux.
                </p>
                <p>
                    Якщо вам потрібно розгорнути вашу систему на Windows тоді IIS7 забезпечить вам найкращу стабільність
                    та продуктивність. Ви можете використовувати phpmanager (GUI плагин для IIS7) щоб спростити
                    конфігурування та керування PHP. IIS7 постачається з вбудованим та готовим до використання FastCGI,
                    вам лише потрібно сконфігурувати PHP як обробник. Для підтримки та додаткових ресурсів існує
                    спеціальний розділ на iis.net для PHP.
                </p>
                <p>
                    Зазвичай, запуск вашої програми в різних середовищах при розробці та її безпосередньому використанні
                    може призвести до дивних помилок, що появлятимуться коли ви запускаєте програму.Якщо ви розробляєте
                    програми на Windows для використання під Linux, або якусь іншу ОС (не Windows).
                </p>
                <p>
                    Тоді ви повинні розглянути використання віртуальної машини. Це звучить складно, та з допомогою Vagrant
                    ви можете встановити прості обгортки, згодом використовуючи Puppet або Chef ви можете створювати ці
                    блоки та ділитися ними з своїми колегами, щоб впевнитися, що ви працюєте над одним і тим же.
                    Більше про це згодом.
                </p>
            </div>
        </div>

        <div class="h1" style="text-align: center">
            Керівництво з написання коду
        </div>
        <div>
            <p>
                Світ PHP великий та різноманітний, він складається з незліченних бібліотек, фреймворків та компонентів.
                Це спільне для PHP розробників, можливість обирати кілька з них та обєднувати в одному проекті.
                Важливо, щоб PHP код притримувався, на стільки, на скільки можливо, загальної стилістики коду,
                щоб полегшити розробникам змішування та поєднання різноманітних бібліотек для їх проектів.
            </p>
            <p>
                Група Взаємодії Фреймворків (раніше відома, як ‘Група PHP Стандартів’) запропонувала та схвалила
                серію рекомендацій по стилю кодування, відомих як PSR-0, PSR-1 і PSR-2. Не дозволяйте цим смішним
                іменам спантеличити вас, ці рекомендації всього лиш набір правил, котрі деякі проекти, такі як Drupal,
                Zend, CakePHP, phpBB, AWS SDK, FuelPHP, Lithium, та інші починають впроваджувати. Ви можете почати
                використовувати їх для своїх власних проектів або продовжувати використовувати ваш власний стиль.
            </p>
            <p>
                В ідеалі ви повинні писати код, котрий притримується одного або кількох із цих стандартів,
                щоб інші розробники могли легко читати і працювати з вашим кодом. Всі вони добавляють вимоги до
                попередньої рекомендації, отож використання PSR-1 вимагає PSR-0, але не вимагає PSR-2.
            </p>
            <p>
                <a href="psr0.php">Read about PSR-0</a>
            </p>
            <p>
                <a href="psr1.php">Read about PSR-1</a>
            </p>
            <p>
                <a href="psr2.php">Read about PSR-2</a>
            </p>
            <p>
                <a href="">Read about PSR-4</a>
            </p>
            <p>
                <a href="">Read about PEAR Coding</a>
            </p>
            <p>
                <a href="">Read about Zend Coding Standards</a>
            </p>
            <p>
                <a href="">Read about Symfony Coding Standards</a>
            </p>
            <p>
                Ви можете використовувати PHP_CodeSniffer, для перевірки коду на відповідність цим рекомендаціям,
                додатки до текстових редакторів; Sublime Text 2 або подібні для отримання допомоги у реальному часі.
            </p>
            <p>
                Використовуйте Налагоджувач стандартів кодування PHP Фаб’єна Потенсьєра для автоматичної зміни
                синтаксису вашого коду, щоб він відповідав цим стандартам, це позбавить вас від виправлення
                кожної проблеми вручну.
            </p>
            <p>
                Слід використовувати англійську для іменування. Коментарі можуть бути на будь-якій мові, зручній для
                усіх, хто працює з кодом або буде працювати у майбутньому.
            </p>
        </div>

        <div class="h1" style="text-align: center">
            Особливості мови
        </div>
        <div>

            <div class="h2" style="text-align: center">
                Парадигми програмування
            </div>
            <div>
                <p>
                    PHP гнучка та динамічна мова, котра підтримує різноманітя технік програмування.
                    Вона значно розвинулася з роками, зокрема додавши солідну об’єктно-орієнтовну
                    модель в PHP 5.0 (2004), анонімні функції та просторові імена в PHP 5.3 (2009),
                    а також трейти в PHP 5.4 (2012).
                </p>

                <div class="h3" style="text-align: center">
                    Об’єктно-орієнтоване програмування
                </div>
                <div>
                    <p>
                        PHP має повний набір особливостей об’єктно-орієнтованого програмування,
                        включаючи підтримку класів, абстрактних класів, інтерфейсів, наслідування,
                        конструкторів, клонування, винятків та ін.
                    </p>
                    <ul>
                        <li>
                            <a href="http://www.php.net/manual/en/language.oop5.php">
                                Прочитати про об’єктно орієнтований PHP
                            </a>
                        </li>
                        <li>
                            <a href="http://www.php.net/traits">
                                Прочитати про трейти
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="h3" style="text-align: center">
                    Функціональне програмування
                </div>
                <div>
                    <p>
                        PHP підтримує функції першого класу, це означає, що функція може бути призначена змінній.
                        Обидві, створені користувачем та вбудовані функції можуть посилатися на змінну та
                        викликатися динамічно. Функції можуть бути передані як аргументи іншим функціям
                        (ця особливість називається функцією вищого порядку),
                        а також функція може повертати інші функції.
                    </p>
                    <p>
                        Рекурсія - особливіть, котра дозволяє функції викликати саму себе, це підтримується мовою,
                        та більша частина PHP коду фокусується на ітерації.
                    </p>
                    <p>
                        Нові анонімні функції (з підтримкою для замикань) присутні від PHP 5.3 (2009
                    </p>
                    <p>
                        PHP 5.4 добавив нову можливість зв’язувати замикання з областю видимості об’єкта,
                        а також вдосконалено підтримку callables, так що вони можуть бути використані
                        нарівні з анонімними функціями практично у всіх випадках.
                    </p>
                    <ul>
                        <li>
                            Продовжити читання
                            <a href="http://iflista.github.io/pages/Functional-Programming.html">
                                Функціональне програмування в PHP
                            </a>
                        </li>
                        <li>
                            <a href="http://www.php.net/manual/en/functions.anonymous.php">
                                Читати про анонімні функції
                            </a>
                        </li>
                        <li>
                            <a href="http://php.net/manual/en/class.closure.php">
                                Читати про клас замикання
                            </a>
                        </li>
                        <li>
                            <a href="https://wiki.php.net/rfc/closures">
                                Більше інформації в Closures RFC
                            </a>
                        </li>
                        <li>
                            <a href="http://php.net/manual/en/language.types.callable.php">
                                Читати про Callables
                            </a>
                        </li>
                        <li>
                            <a href="http://php.net/manual/en/function.call-user-func-array.php">
                                Читати про функції динамічного виклику з <code>call_user_func_array</code>
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="h3" style="text-align: center">
                    Мета програмування
                </div>
                <div>
                    <p>
                        PHP підтримує різноманітні форми мета програмування через такі механізми як
                        Reflection API та Magic Methods. Доступно багато Magic Methods, таких як <code>__get()</code>,
                        <code>__set()</code>, <code>__clone()</code>, <code>__toString()</code>,
                        <code>__invoke()</code>, та ін.
                        що дозволяють розробникам змінювати поведінку класу. Розробники Ruby часто говорять,
                        що PHP бракує method_missing, та він доступний як <code>__call()</code> і
                        <code>__callStatic()</code>.
                    </p>
                    <ul>
                        <li>
                            <a href="http://php.net/manual/en/language.oop5.magic.php">
                                Читати про Magic Methods
                            </a>
                        </li>
                        <li>
                            <a href="http://www.php.net/manual/en/intro.reflection.php">
                                Читати про Reflection
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="h2" style="text-align: center">
                Простори імен
            </div>
            <div>
                <p>
                    Як було сказано вище, PHP спільнота складається з багатьох розробників, котрі створюють дуже
                    багато коду. Це означає, що одна бібліотека PHP, може мати таку ж назву класу, як і інша.
                    Коли обидві бібліотеки використовуються в одному просторі імен, вони стикаються і
                    викликають проблеми.
                </p>
                <p>
                    <i>Простори імен</i> вирішують цю проблему. Як описано в документації PHP, простори імен,
                    можна порівняти з папками операційної системи, котрі являються <i>просторами імен</i> файлів;
                    два файли з однаковими іменами можуть співіснувати в різних директоріях.
                    Подібно цьому, два PHP класи з однаковими назвами можуть співіснувати в різних просторах імен PHP.
                </p>
                <p>
                    Це важливо для вас, добавляти ваш код в простори імен, так щоб він міг використовуватися
                    іншими розробниками, без страху зіткнення з іншими бібліотеками.
                </p>
                <p>
                    Один з рекомендованих способів використання просторів імен описаний в
                    <a href="psr0.php">
                        PSR-0
                    </a>,
                    котрий призваний забезпечити стандартну домовленість файлів, класів та просторів імен,
                    щоб дозволити файлів для забезпечення plug-and-play коду.
                </p>
                <ul>
                    <li>
                        <a href="http://php.net/manual/en/language.namespaces.php">
                            Читати про простори імен
                        </a>
                    </li>
                    <li>
                        <a href="psr0.php">
                            Читати про PSR-0
                        </a>
                    </li>
                </ul>
            </div>

            <div class="h2" style="text-align: center">
                Стандартна бібліотека PHP
            </div>
            <div>
                <p>
                    Стандартна бібліотека PHP (SPL) постачається з PHP та надає набір класів та інтерфейсів.
                    Вона складається в основному з часто використовуваних класів структури даних
                    (stack, queue, heap, та ін.) та ітераторів, котрі можуть пройти через ці структури
                    даних чи через ваші власні класи, котрі реалізують інтерфейси SPL.
                </p>
                <ul>
                    <li>
                        <a href="http://php.net/manual/en/book.spl.php">
                            Читати про SPL
                        </a>
                    </li>
                </ul>
            </div>

            <div class="h2" style="text-align: center">
                Інтерфейс командної строки
            </div>
            <div>
                <p>
                    PHP був створений в основному для написання веб додатків, та він також корисний для написання
                    скриптів інтерфейсу командної строки (CLI). PHP програми для командної строки можуть
                    допомогти вам автоматизувати спільні задачі, такі як тестування, розгортання,
                    та адміністрування додатку.
                </p>
                <p>
                    CLI PHP програми дуже потужні, через те, що ви можете використовувати код вашого додатку напряму,
                    без потреби в створенні і забезпеченні безпеки веб-інтерфейсу (GUI) для нього.
                    Тільки впевніться, що ваші CLI PHP скріпти знаходяться в корені вашого веб-серверу.
                </p>
                <p>
                    Спробуйте запустити PHP з консолі:
                </p>
                <pre>
                    > php -i
                </pre>
                <p>
                    Опція <code>-i</code> відобразить вашу PHP конфігурацію, схоже з функцією
                    <a href="http://php.net/manual/en/function.phpinfo.php">
                        phpinfo
                    </a>.
                </p>
                <p>
                    Опція <code>-a</code> забезпечує інтерактивну оболонку, схожу з IRB ruby або інтерактивною
                    оболонкою python. Також є цілий ряд інших корисних
                    <a href="http://www.php.net/manual/en/features.commandline.options.php">
                        опцій командної строки
                    </a>.
                </p>
                <p>
                    Давайте напишемо просту “Hello, $name” CLI програму. Щоб це зробити, створіть
                    файл з іменем <code>hello.php</code>, як показано нижче.
                </p>
                <code>
                    &lt;?php<br>
                    if($argc != 2) {<br>
                        echo "Usage: php hello.php [name].\n";<br>
                        exit(1);<br>
                    }<br>
                    $name = $argv[1];<br>
                    echo "Hello, $name\n";
                </code>
                <p>
                    PHP встановлює дві спеціальні змінні, котрі базуються на аргументах, з якими запущений ваш скріпт.
                    <a href="http://php.net/manual/en/reserved.variables.argc.php">$argc</a> - це змінна з числовим
                    значенням, що містить <i>count</i> аргументів та
                    <a href="http://php.net/manual/en/reserved.variables.argv.php">$argv</a> - це масив,
                    що містить значення кожного аргумента. Перший аргумент - завжди імя файлу вашого PHP скріпта,
                    в цьому випадку це <code>hello.php</code>.
                </p>
                <p>
                    Вираз <code>exit()</code> використовується з не нульовим числом, щоб дати оболонці зрозуміти,
                    що команда не вдалася. Часто використовувані коди завершення можна знайти
                    <a href="http://www.gsp.com/cgi-bin/man.cgi?section=3&topic=sysexits">тут</a>.
                </p>
                <p>
                    Щоб запустити наш скрипт із командної строки:
                </p>
                <pre>
                    > php hello.php
                    Usage: php hello.php [name]
                    > php hello.php world
                    Hello, world
                </pre>
                <ul>
                    <li>
                        <a href="http://php.net/manual/en/features.commandline.php">
                            Читати про запуск PHP з командної строки
                        </a>
                    </li>
                    <li>
                        <a href="http://www.php.net/manual/en/install.windows.commandline.php">
                            Читати про налаштування Windows для запуску PHP з командної строки
                        </a>
                    </li>
                </ul>
            </div>

        </div>

        <div class="h1" style="text-align: center">
            Управління залежностями
        </div>
        <div>
            <p>
                Є багато PHP бібліотек, фреймворків та компонентів на вибір. Ваш проект буде, швидше за все,
                використовувати декотрі з них - це і є залежності проекту. Навіть якщо ви управляли ними вручну,
                вам все одно потрібно було турбуватися про автозавантажувачі. Більше цього не потрібно.
            </p>
            <p>
                Зараз існує дві основні системи управління пакетами для PHP - Composer і PEAR.
                Котра з них підходить вам? Відповідь - обидві.
            </p>
            <ul>
                <li>
                    Використовуйте <b>Composer</b> коли управляєте залежностями для одного проекту.
                </li>
                <li>
                    Використовуйте <b>PEAR</b> коли управляєте залежностями для PHP в цілому у вашій системі.
                </li>
            </ul>
            <p>
                В загальному, пакети Composer будуть доступні тільки у проектах, котрі ви явно вкажете,
                тоді як пакети PEAR будуть доступні для всіх ваших PHP проектів. На перший погляд,
                PEAR може здатися більш простим підходом, але є певні переваги в використанні підходу
                проект-до-проекту для залежностей.
            </p>

            <div class="h2" style="text-align: center">
                Composer і Packagist
            </div>
            <div>
                <p>
                    Composer це <b>прекрасний</b> менеджер залежностей для PHP. Вкажіть перелік залежностей вашого
                    проекту в файлі <code>composer.json</code> і після кількох простих команд,
                    Composer автоматично завантажить залежності вашого проекту і встановить автозавантаження для вас.
                </p>
                <p>
                    Вже існує багато PHP бібліотек, котрі сумісні з Composer, готових до використання у вашому проекті.
                    Перелік цих “пакетів” є на <a href="http://packagist.org/">Packagist</a>,
                    офіційному репозиторію для Composer сумісних PHP бібліотек.
                </p>

                <div class="h3" style="text-align: center">
                    Як встановити Composer
                </div>
                <div>
                    <p>
                        Ви можете встановити Composer локально (в вашій теперішній робочій директорії;
                        хоча це більше не рекомендується) або глобально (напр. /usr/local/bin).
                        Припустимо ви хочете встановити Composer локально. З кореневої директорії
                        вашого проекту виконайте:
                    </p>
                    <pre>
                        curl -s http://getcomposer.org/installer | php
                    </pre>
                    <p>
                        Це завантажить <code>composer.phar</code> (двійковий PHP архів). Ви можете запустити
                        його через <code>php</code> для управління залежностями вашого проекту.
                        <b>Зверніть увагу:</b> Якщо ви завантажите код напряму в ваш інтерпретатор, будь ласка,
                        спочатку перечитайте його онлайн, для підтвердження його безпеки.
                    </p>
                </div>

                <div class="h3" style="text-align: center">
                    Як встановити Composer (вручну)
                </div>
                <div>
                    <p>
                        Встановлення Composer вручну - прогресивна техніка; проте, існують різні причини,
                        чому розробник може надати перевагу цьому методу над використанням інтерактивного встановлення.
                        Інтерактивне встановлення перевіряє ваше встановлення PHP, щоб впевнитися, що:
                    </p>
                    <ul>
                        <li>
                            використовується достатня версія PHP
                        </li>
                        <li>
                            файли <code>.phar</code> можуть бути виконані коректно
                        </li>
                        <li>
                            Достатні визначені права доступу до каталогу
                        </li>
                        <li>
                            певні проблемні розшинення не завантажені
                        </li>
                        <li>
                            певні налаштування php.ini встановлені
                        </li>
                    </ul>
                    <p>
                        Так як ручне встановлення не виконує жодну з цих перевірок, ви повинні вирішити,
                        чи варто йти на такий компроміс. Нижче описано, як отримати Composer вручну:
                    </p>
                    <pre>
                        curl -s http://getcomposer.org/composer.phar -o $HOME/local/bin/composer
                        chmod +x $HOME/local/bin/composer
                    </pre>
                    <p>
                        Шлях <code>$HOME/local/bin</code> (або вибрана вами директорія) повинні знаходитися
                        у вашій змінній оточення <code>$PATH</code>. Результатом буде доступність команди
                        <b>composer</b>.
                    </p>
                    <p>
                        Коли ви прочитаєте документацію до пункту, котрий стверджує,
                        що потрібно запускати Composer як <code>php composer.phar install</code>,
                        ви можете замінити цю команду як:
                    </p>
                    <pre>
                        composer install
                    </pre>
                </div>

                <div class="h3" style="text-align: center">
                    Як визначити і встановити залежності
                </div>
                <div>
                    <p>
                        Спочатку створіть файл <code>composer.json</code> в тій же директорії, що і
                        <code>composer.phar</code>. Ось приклад переліку для
                        <a href="http://twig.sensiolabs.org/">Twig</a> в якості залежності проекту.
                    </p>
                    <pre>
                        {
                            "require": {
                                "twig/twig": "1.8.*"
                            }
                        }
                    </pre>
                    <p>
                        Далі запустіть цю команду з кореневої директорії вашого проекту.
                    </p>
                    <pre>
                        php composer.phar install
                    </pre>
                    <p>
                        Це завантажить та встановить залежності проекту в директорію vendors/.
                        Далі добавте цю лінію в основний PHP файл вашого додатку;
                        це вкаже PHP використовувати автозавантажувач Composer для залежностей вашого проекту.
                    </p>
                    <code>
                        &lt;?php<br>
                        require 'vendor/autoload.php';
                    </code>
                    <p>
                        Тепер ви можете використовувати залежносі вашого проекту і вони будуть автоматично
                        завантажуватися по вимозі.
                    </p>
                    <ul>
                        <li>
                            <a href="http://getcomposer.org/doc/00-intro.md">
                                Читати про Composer
                            </a>
                        </li>
                    </ul>
                </div>

            </div>

            <div class="h2" style="text-align: center">
                PEAR
            </div>
            <div>
                <p>
                    Інший ветеран пакетних менеджерів, яким насолоджуються багато PHP розробників це
                    <a href="http://pear.php.net/">PEAR</a>.
                    Він поводиться практично таким же чином і також заслуговує розгляду для ваших проектів.
                    <a href="http://pear.php.net/">Читати про PEAR</a>.
                </p>
            </div>

        </div>

    </div>

<?php include_once("footer.php");