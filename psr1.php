<?php include_once("header.php");
session_destroy();
?>

<div class="mypadding" style="text-align: justify">

    <div class="h1" style="text-align: center">
        PSR-1 - Базовий стандарт оформлення коду
    </div>
    <div>
        <p>
            Даний розділ описує стандартні елементи, які є істотними для забезпечення високої технічної сумісності
            коду, створеного і / або підтримуваного різними розробниками.
        </p>
        <p>
            Слова «НЕОБХІДНО» / «ПОВИННО» ( «MUST»), «Неприпустимо» ( «MUST NOT»), «ПОТРІБНО» ( «REQUIRED»),
            «ПОТРІБНО» ( «SHALL»), «не дозволяє» ( «SHALL NOT »),« СЛІД »(« SHOULD »),« НЕ СЛІД »(« SHOULD NOT »),
            « РЕКОМЕНДУЄТЬСЯ »(« RECOMMENDED »),« МОЖЕ »/« МОЖЛИВО »(« MAY ») і« НЕОБОВ'ЯЗКОВО »(« OPTIONAL ») в
            цьому документі слід розуміти так, як це описано в
            <a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a> (і його
            <a href="http://rfc.com.ru/rfc2119.htm">перекладі</a> ).
        </p>

        <div class="h2" style="text-align: center">
            1. Загальні положення
        </div>
        <div>
            <ul>
                <li>
                    У файлах НЕОБХІДНО використовувати тільки теги &lt;? Php і &lt;? = .
                </li>
                <li>
                    Файли НЕОБХІДНО представляти тільки в кодуванні UTF-8 без BOM-байта.
                </li>
                <li>
                    У файлах СЛІД або оголошувати структури (класи, функції, константи і т.п.), або
                    генерувати побічні ефекти (виконувати дії) (наприклад: передавати дані в вихідний
                    потік, модифікувати настройки і т.п.), але НЕ СЛІД робити одночасно і те і інше.
                </li>
                <li>
                    Імена просторів імен та імена класів ПОВИННІ слідувати стандарту
                    <a href="psr0.php">PSR-0</a> .
                </li>
                <li>
                    Імена класів ПОВИННІ бути оголошені з використанням т.зв. « StudlyCaps » (кожне слово починається
                    з великої літери, між словами немає роздільників).
                </li>
                <li>
                    Константи класів ПОВИННІ бути оголошені виключно в верхньому регістрі з використанням символу
                    підкреслення для поділу слів.
                </li>
                <li>
                    Імена методів ПОВИННІ бути оголошені з використанням т.зв. « CamelCase » (перше слово пишеться в
                    нижньому регістрі, далі кожне слово починається з великої літери, а між словами немає роздільників).
                </li>
            </ul>
        </div>

        <div class="h2" style="text-align: center">
            2. Файли
        </div>
        <div>
            <div class="h3" style="text-align: center">
                2.1. PHP-теги
            </div>
            <div>
                <p>
                    PHP-код ОБОВ'ЯЗКОВО слід укладати в повну версію ( &lt;? Php?> ) Тегів вкорочений (скорочену запис
                    echo) версію
                    ( &lt;? =?> ) Тегів і НЕПРИПУСТИМО укладати ні в які інші різновиди тегів.
                </p>
            </div>

            <div class="h3" style="text-align: center">
                2.2. Кодування символів
            </div>
            <div>
                <p>
                    PHP-код ПОВИНЕН бути представлений тільки в кодуванні UTF-8 без BOM-байта.
                </p>
            </div>

            <div class="h3" style="text-align: center">
                2.3. Побічні ефекти
            </div>
            <div>
                <p>
                    У файлах СЛІД або оголошувати структури (класи, функції, константи і т.п.) і не створювати побічних
                    ефектів (наприклад: передавати дані в вихідний потік, модифікувати настройки і т.п.), або
                    реалізовувати
                    логіку, яка породжує побічні ефекти, але НЕ СЛІД робити одночасно і те, і інше.
                </p>
                <p>
                    Під «побічними ефектами» розуміється реалізація логіки, не пов'язаної з оголошенням класів, функцій,
                    констант і т.п. - Навіть підключення зовнішнього файлу вже є «побічним ефектом».
                </p>
                <p>
                    «Побічні ефекти» включають (але не обмежуються цим переліком): передачу даних в вихідний потік,
                    явне використання require або include, зміна налаштувань, генерування помилкових ситуацій або
                    породження винятків, зміна глобальних або локальних змінних, читання з файлу або запис в файл і
                    т .п.
                </p>
                <p>
                    Нижче представлений приклад файлу, що містить в собі як оголошення структур, так і породження
                    побічних ефектів, тобто ситуації, якої варто уникати:
                </p>
                <code>
                    &lt;?php<br>
                    // side effect: change ini settings<br>
                    ini_set('error_reporting', E_ALL);<br>
                    <br>
                    // side effect: loads a file<br>
                    include "file.php";<br>
                    <br>
                    // side effect: generates output<br>
                    echo "&lt;html>\n";<br>
                    <br>
                    // declaration<br>
                    function foo()<br>
                    {<br>
                    // function body<br>
                    }
                </code>
                <p>
                    Наступний приклад демонструє файл з оголошеннями без побічних ефектів - тобто зразок рекомендованої
                    реалізації:
                </p>
                <code>
                    &lt;?php<br>
                    // declaration<br>
                    function foo()<br>
                    {<br>
                    // function body<br>
                    }<br>
                    <br>
                    // conditional declaration is *not* a side effect<br>
                    if (! function_exists('bar')) {<br>
                    function bar()<br>
                    {<br>
                    // function body<br>
                    }<br>
                    }
                </code>
                <br>
            </div>
        </div>

        <div class="h2" style="text-align: center">
            3. Імена просторів імен і імена класів
        </div>
        <div>
            <p>
                Імена просторів імен та імена класів ПОВИННІ слідувати стандарту PSR-0 .
                В кінцевому підсумку це означає, що кожен клас повинен розташовуватися в окремому файлі і в
                просторі імен з хоча б одним верхнім рівнем (ім'ям виробника).
            </p>
            <p>
                Імена класів ПОВИННІ бути оголошені з використанням т.зв. « StudlyCaps »
                (кожне слово починається з великої літери, між словами немає роздільників).
            </p>
            <p>
                Код, написаний для PHP 5.3 і новіших версій, ПОВИНЕН використовувати формальні простору імен, наприклад:
            </p>
            <code>
                &lt;?php<br>
                <br>
                // PHP 5.3 и новее:<br>
                namespace Vendor\Model;<br>
                <br>
                class Foo<br>
                {<br>
                }
            </code>
            <p>
                У коді, написаному для PHP 5.2.x і нижче, СЛІД при іменуванні класів дотримуватися угоди про
                псевдопространствах
                імен з префіксом у вигляді імені виробника ( Vendor_ ):
            </p>
            <code>
                &lt;?php<br>
                <br>
                // PHP 5.2.x и ранее:<br>
                class Vendor_Model_Foo<br>
                {<br>
                }
            </code>
            <br>

        </div>

        <div class="h2" style="text-align: center">
            4. Константи, властивості і методи класів
        </div>
        <div>
            <p>
                Тут під «класом» слід розуміти також інтерфейси ( interface ) і домішки ( trait ).
            </p>

            <div class="h3" style="text-align: center">
                4.1. Константи
            </div>
            <div>
                <p>
                    Константи класів ПОВИННІ бути оголошені в верхньому регістрі з використанням символу підкреслення
                    як роздільник слів, наприклад:
                </p>
                <code>
                    &lt;?php<br>
                    <br>
                    namespace Vendor\Model;<br>
                    <br>
                    class Foo<br>
                    {<br>
                    const VERSION = '1.0';<br>
                    const DATE_APPROVED = '2012-06-01';<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                4.2. Властивості
            </div>
            <div>
                <p>
                    У цьому посібнику навмисно не наводиться жодних рекомендацій щодо використання $ StudlyCaps ,
                    $ camelCase
                    або $ under_score варіантів іменування властивостей.
                </p>
                <p>
                    Який би варіант іменування не був обраний, СЛІД зберігати його незмінним в рамках деякого розумного
                    обсягу коду (наприклад, на рівні виробника, пакета, класу або методу).
                </p>
            </div>

            <div class="h3" style="text-align: center">
                4.3. Методи
            </div>
            <div>
                <p>
                    Імена методів ПОВИННІ бути оголошені з використанням т.зв. « CamelCase » (перше слово пишеться
                    в нижньому
                    регістрі, далі кожне слово починається з великої літери, а між словами немає роздільників).
                </p>
            </div>
        </div>
    </div>

    <div class="row-fluid" style="text-align: center">
        <div class="span12">
            <div class="row-fluid">

                <div class="span6 btn btn-link">
                    <a href="psr0.php">
                        <button type="button">
                            <span class="glyphicon glyphicon-arrow-left"></span> Попередня сторінка
                        </button>
                    </a>
                </div>

                <div class="span6 btn btn-link">
                    <a href="psr2.php">
                        <button type="button" >
                            Наступна сторінка <span> class="glyphicon glyphicon-arrow-right"></span>
                        </button>
                    </a>
                </div>

            </div>
        </div>
    </div>
</div>

<?php include_once("footer.php");