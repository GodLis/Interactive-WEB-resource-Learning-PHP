<?php include_once("header.php");
session_destroy();
?>

<div class="mypadding" style="text-align: justify">

    <div class="h1" style="text-align: center">
        PSR-2 - Рекомендації по оформленню коду
    </div>
    <div>
        Дані рекомендації розширюють і доповнюють базовий стандарт оформлення коду
        <a href="psr1.php">PSR-1</a>.
        <br>
        Мета даних рекомендацій - зниження складності сприйняття коду, написаного різними авторами;
        вона досягається шляхом розгляду серії правил і очікувань щодо форматування PHP-коду.
        <br>
        Стилістичні правила, представлені тут, отримані шляхом узагальнення досвіду різних проектів.
        Співпраця багатьох авторів з багатьох проектів дозволяє виробити єдиний набір принципів і
        використовувати його в цих проектах. Таким чином, користь представлених рекомендацій -
        не стільки в самих рекомендаціях, скільки в їх розповсюдженні.
        <br>
        Слова «НЕОБХІДНО» / «ПОВИННО» ( «MUST»), «Неприпустимо» ( «MUST NOT»), «ПОТРІБНО» ( «REQUIRED»),
        «ПОТРІБНО» ( «SHALL»), «не дозволяє» ( «SHALL NOT »), « СЛІД »(« SHOULD »), « НЕ СЛІД »(« SHOULD NOT »),
        « РЕКОМЕНДУЄТЬСЯ »(« RECOMMENDED »), « МОЖЕ »/« МОЖЛИВО »(« MAY ») і« НЕОБОВ'ЯЗКОВО »(« OPTIONAL »)
        в цьому документі слід розуміти так, як це описано в
        <a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>
        (і його
        <a href="http://rfc.com.ru/rfc2119.htm">перекладі</a> ).
    </div>

    <div class="h2" style="text-align: center">
        1. Загальні положення
    </div>
    <div>
        <ul>
            <li>
                Код ПОВИНЕН бути оформлений відповідно до стандарту <a href="psr1.php">PSR-1</a> .
            </li>
            <li>
                Для оформлення відступів ПОВИННІ використовуватися чотири пробілу (але не знак табуляції).
            </li>
            <li>
                Неприпустимо жорстко обмежувати довжину рядка; м'яке обмеження ПОВИННО складати 120 символів; СЛІД
                намагатися, щоб довжина рядка становила 80 символів або менше.
            </li>
            <li>
                Після визначення простору імен ( namespace ) і після блоку імпорту просторів імен ( use ) ПОВИННА
                бути один порожній рядок.
            </li>
            <li>
                Відкриває фігурна дужка у визначенні класу ПОВИННА розташовуватися на новій рядку, а закриває фігурна
                дужка ПОВИННА розташовуватися на наступному рядку після тіла класу.
            </li>
            <li>
                Відкриває фігурна дужка у визначенні методу ПОВИННА розташовуватися на новій рядку, а закриває фігурна
                дужка ПОВИННА розташовуватися на наступному рядку після тіла методу.
            </li>
            <li>
                Область видимості ПОВИННА бути вказана явно для всіх властивостей і методів; модифікатори abstract і
                final ПОВИННІ розташовуватися перед модифікаторами області видимості; модифікатор static ПОВИНЕН
                розташовуватися після модифікаторів області видимості.
            </li>
            <li>
                Після ключових слів в керуючих конструкціях ПОВИНЕН розташовуватися один пробіл, а після викликів
                функцій і методів - НЕ МАЄ.
            </li>
            <li>
                Відкриває фігурна дужка в керуючих конструкціях ПОВИННА розташовуватися в тому ж рядку, що і сама
                конструкція, а закриває фігурна дужка ПОВИННА розташовуватися на наступному рядку після тіла
                конструкції.
            </li>
            <li>
                Після відкриває круглої дужки і перед закриває круглої дужкою в керуючих конструкціях НЕ ПОВИННО бути
                пробілу.
            </li>
        </ul>
    </div>

    <div class="h3" style="text-align: center">
        1.1. Приклад
    </div>
    <div>
        Наступний приклад охоплює частину з вищеописаних правил:
        <br>
        <code>
            &lt;?php<br>
            namespace Vendor\Package;<br>
            <br>
            use FooInterface;<br>
            use BarClass as Bar;<br>
            use OtherVendor\OtherPackage\BazClass;<br>
            <br>
            class Foo extends Bar implements FooInterface<br>
            {<br>
                public function sampleMethod($a, $b = null)<br>
                {<br>
                    if ($a === $b) {<br>
                        bar();<br>
                    } elseif ($a > $b) {<br>
                        $foo->bar($arg1);<br>
                    } else {<br>
                        BazClass::bar($arg2, $arg3);<br>
                    }<br>
                }<br>
            <br>
                final public static function bar()<br>
                {<br>
                    // method body<br>
                }<br>
            }<br>
        </code>
        <br>
    </div>

    <br>
</div>

<?php include_once("footer.php");