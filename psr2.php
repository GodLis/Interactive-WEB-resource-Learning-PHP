<?php include_once("header.php");
session_destroy();
?>

<div class="mypadding" style="text-align: justify">

    <div class="h1" style="text-align: center">
        PSR-2 - Рекомендації по оформленню коду
    </div>
    <div>
        <p>
            Дані рекомендації розширюють і доповнюють базовий стандарт оформлення коду
            <a href="psr1.php">PSR-1</a>.
        </p>
        <p>
            Мета даних рекомендацій - зниження складності сприйняття коду, написаного різними авторами;
            вона досягається шляхом розгляду серії правил і очікувань щодо форматування PHP-коду.
        </p>
        <p>
            Стилістичні правила, представлені тут, отримані шляхом узагальнення досвіду різних проектів.
            Співпраця багатьох авторів з багатьох проектів дозволяє виробити єдиний набір принципів і
            використовувати його в цих проектах. Таким чином, користь представлених рекомендацій -
            не стільки в самих рекомендаціях, скільки в їх розповсюдженні.
        </p>
        <p>
            Слова «НЕОБХІДНО» / «ПОВИННО» ( «MUST»), «Неприпустимо» ( «MUST NOT»), «ПОТРІБНО» ( «REQUIRED»),
            «ПОТРІБНО» ( «SHALL»), «не дозволяє» ( «SHALL NOT »), « СЛІД »(« SHOULD »), « НЕ СЛІД »(« SHOULD NOT »),
            « РЕКОМЕНДУЄТЬСЯ »(« RECOMMENDED »), « МОЖЕ »/« МОЖЛИВО »(« MAY ») і« НЕОБОВ'ЯЗКОВО »(« OPTIONAL »)
            в цьому документі слід розуміти так, як це описано в
            <a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>
            (і його
            <a href="http://rfc.com.ru/rfc2119.htm">перекладі</a> ).
        </p>

        <div class="h2" style="text-align: center">
            1. Загальні положення
        </div>
        <div>
            <ul>
                <li>
                    Код ПОВИНЕН бути оформлений відповідно до стандарту <a href="psr1.php">PSR-1</a> .
                </li>
                <li>
                    Для оформлення відступів ПОВИННІ використовуватися чотири пробілу (але не знак табуляції).
                </li>
                <li>
                    Неприпустимо жорстко обмежувати довжину рядка; м'яке обмеження ПОВИННО складати 120 символів; СЛІД
                    намагатися, щоб довжина рядка становила 80 символів або менше.
                </li>
                <li>
                    Після визначення простору імен ( namespace ) і після блоку імпорту просторів імен ( use ) ПОВИННА
                    бути один порожній рядок.
                </li>
                <li>
                    Відкриває фігурна дужка у визначенні класу ПОВИННА розташовуватися на новій рядку, а закриває
                    фігурна
                    дужка ПОВИННА розташовуватися на наступному рядку після тіла класу.
                </li>
                <li>
                    Відкриває фігурна дужка у визначенні методу ПОВИННА розташовуватися на новій рядку, а закриває
                    фігурна
                    дужка ПОВИННА розташовуватися на наступному рядку після тіла методу.
                </li>
                <li>
                    Область видимості ПОВИННА бути вказана явно для всіх властивостей і методів; модифікатори abstract і
                    final ПОВИННІ розташовуватися перед модифікаторами області видимості; модифікатор static ПОВИНЕН
                    розташовуватися після модифікаторів області видимості.
                </li>
                <li>
                    Після ключових слів в керуючих конструкціях ПОВИНЕН розташовуватися один пробіл, а після викликів
                    функцій і методів - НЕ МАЄ.
                </li>
                <li>
                    Відкриває фігурна дужка в керуючих конструкціях ПОВИННА розташовуватися в тому ж рядку, що і сама
                    конструкція, а закриває фігурна дужка ПОВИННА розташовуватися на наступному рядку після тіла
                    конструкції.
                </li>
                <li>
                    Після відкриває круглої дужки і перед закриває круглої дужкою в керуючих конструкціях НЕ ПОВИННО
                    бути пробілу.
                </li>
            </ul>

            <div class="h3" style="text-align: center">
                1.1. Приклад
            </div>
            <div>
                <p>
                    Наступний приклад охоплює частину з вищеописаних правил:
                </p>
                <code>
                    &lt;?php<br>
                    namespace Vendor\Package;<br>
                    <br>
                    use FooInterface;<br>
                    use BarClass as Bar;<br>
                    use OtherVendor\OtherPackage\BazClass;<br>
                    <br>
                    class Foo extends Bar implements FooInterface<br>
                    {<br>
                    public function sampleMethod($a, $b = null)<br>
                    {<br>
                    if ($a === $b) {<br>
                    bar();<br>
                    } elseif ($a > $b) {<br>
                    $foo->bar($arg1);<br>
                    } else {<br>
                    BazClass::bar($arg2, $arg3);<br>
                    }<br>
                    }<br>
                    <br>
                    final public static function bar()<br>
                    {<br>
                    // method body<br>
                    }<br>
                    }<br>
                </code>
            </div>
        </div>

        <div class="h2" style="text-align: center">
            2. Основні положення
        </div>
        <div>
            <div class="h3" style="text-align: center">
                2.1. Базовий стандарт оформлення коду
            </div>
            <div>
                <p>
                    Код ПОВИНЕН бути оформлений згідно з усіма правилами, зазначеним в стандарті
                    <a href="psr1.php">PSR-1</a>.
                </p>
            </div>

            <div class="h3" style="text-align: center">
                2.2. файли
            </div>
            <div>
                <ul>
                    <li>
                        У всіх файлах з PHP-кодом ПОВИНЕН бути використаний Unix-варіант перенесення рядків (Unix
                        linefeed, тобто <code>\n</code> ).
                    </li>
                    <li>
                        В кінці кожного файлу з PHP-кодом ПОВИННА бути один порожній рядок.
                    </li>
                    <li>
                        Закриває тег <code>?></code> ПОВИНЕН бути відсутнім в файлах, що містять тільки PHP-код.
                    </li>
                </ul>
            </div>

            <div class="h3" style="text-align: center">
                2.3. рядки
            </div>
            <div>
                <ul>
                    <li>
                        НЕ ПОВИННО бути жорсткого обмеження довжини рядка.
                    </li>
                    <li>
                        М'яке обмеження довжини рядка ПОВИННО складати 120 символів; автоматичні системи перевірки
                        стилю ПОВИННІ видавати попередження при перевищенні цього обмеження, але НЕ ПОВИННІ вважати
                        це помилковою ситуацією.
                    </li>
                    <li>
                        СЛІД намагатися, щоб довжина рядка становила 80 символів або менше; довші рядки СЛІД розбивати
                        на кілька окремих рядків, довжина кожної з яких не перевищувала б 80 символів.
                    </li>
                    <li>
                        В кінці непустих рядків НЕ ПОВИННО бути пробілів.
                    </li>
                    <li>
                        Порожні рядки МОЖУТЬ бути додані в код для підвищення зручності читання і поділу блоків коду.
                    </li>
                    <li>
                        В одному рядку НЕ ПОВИННО бути більш одного виразу.
                    </li>
                </ul>
            </div>

            <div class="h3" style="text-align: center">
                2.4. відступи
            </div>
            <div>
                <p>
                    Для оформлення відступів ПОВИННІ використовуватися чотири пробілу (але не знак табуляції).
                </p>
                <p>
                    Примітка: використання тільки прогалин (без змішування їх з табуляціями) дозволяє уникнути проблем
                    з обробкою історії зміни коду, визначенням самих змін, патчами і коментарями.
                    Використання прогалин також дозволяє легко додавати невеликі відступи для вирівнювання окремих
                    вкладених рядків.
                </p>
            </div>

            <div class="h3" style="text-align: center">
                2.5. Ключові слова та константи true / false / null
            </div>
            <div>
                <ul>
                    <li>
                        Ключові слова PHP ПОВИННІ бути написані в нижньому регістрі.
                    </li>
                    <li>
                        Константи PHP <code>true</code>, <code>false</code> і <code>null</code> ПОВИННІ бути написані
                        в нижньому регістрі.
                    </li>
                </ul>
            </div>
        </div>

        <div class="h2" style="text-align: center">
            3. Визначення просторів імен і блоків імпорту
        </div>
        <div>
            <ul>
                <li>
                    У разі наявності визначення простору імен, після нього ПОВИННА розташовуватися один порожній рядок.
                </li>
                <li>
                    У разі наявності імпорту просторів імен, він ПОВИНЕН розташовуватися після визначення простору імен.
                </li>
                <li>
                    При реалізації імпорту кожне простір імен ПОВИННО імпортуватися окремо (зі своїм ключовим словом
                    <code>use</code>).
                </li>
                <li>
                    Після блоку імпорту ПОВИННА бути один порожній рядок.
                </li>
            </ul>
            <p>
                Приклад:
            </p>
            <code>
                &lt;?php<br>
                <br>
                namespace Vendor\Package;<br>
                <br>
                use FooClass;<br>
                use BarClass as Bar;<br>
                use OtherVendor\OtherPackage\BazClass;<br>
                <br>
                // ... далее следует PHP-код ...
            </code>
        </div>

        <div class="h2" style="text-align: center">
            4. Класи, властивості і методи
        </div>
        <div>
            <p>
                Тут під «класом» слід розуміти також інтерфейси (<code>interface</code>) і домішки (
                <code>trait</code>).
            </p>

            <div class="h3" style="text-align: center">
                4.1. Спадкування і реалізація
            </div>
            <div>
                <ul>
                    <li>
                        Ключові слова <code>extends</code> і <code>implements</code> ПОВИННІ перебувати на тому самому
                        рядку, на якому знаходиться ім'я класу.
                    </li>
                    <li>
                        Відкриває фігурна дужка у визначенні класу ПОВИННА розташовуватися на новій рядку, а закриває
                        фігурна дужка ПОВИННА розташовуватися на наступному рядку після тіла класу.<br>
                        <code>
                            &lt;?php<br>
                            <br>
                            namespace Vendor\Package;<br>
                            <br>
                            use FooClass;<br>
                            use BarClass as Bar;<br>
                            use OtherVendor\OtherPackage\BazClass;<br>
                            <br>
                            class ClassName extends ParentClass implements \ArrayAccess, \Countable<br>
                            {<br>
                            // константы, свойства, методы<br>
                            }
                        </code>
                    </li>
                    <li>
                        Список реалізованих інтерфейсів МОЖЕ бути розділений на декілька рядків, кожен з яких доповнена
                        зліва одним відступом (чотирма пробілами). У такому випадку перший елемент списку інтерфейсів
                        ПОВИНЕН починатися з нового рядка, і в кожному рядку ПОВИНЕН бути зазначений тільки один
                        інтерфейс.<br>
                        <code>
                            &lt;?php<br>
                            <br>
                            namespace Vendor\Package;<br>
                            <br>
                            use FooClass;<br>
                            use BarClass as Bar;<br>
                            use OtherVendor\OtherPackage\BazClass;<br>
                            <br>
                            class ClassName extends ParentClass implements<br>
                                \ArrayAccess,<br>
                                \Countable,<br>
                                \Serializable<br>
                            {<br>
                                // константы, свойства, методы<br>
                            }
                        </code>
                    </li>
                </ul>

            </div>

            <div class="h3" style="text-align: center">
                4.2. властивості
            </div>
            <div>
                <ul>
                    <li>
                        Область видимості ПОВИННА бути явно вказана для кожного властивості.
                    </li>
                    <li>
                        При визначенні якості НЕ ПОВИННО застосовуватися ключове слово var.
                    </li>
                    <li>
                        В одному вираженні НЕ ПОВИННО бути визначено більше одного властивості.
                    </li>
                    <li>
                        Одиночний знак підкреслення на початку імені властивості НЕ СЛІД використовувати як ознака
                        захищеної (<code>protected</code>) або приватній (<code>private</code>) області видимості.
                    </li>
                </ul>
                <p>
                    У загальному випадку визначення властивості виглядає так:
                </p>
                <code>
                    &lt;?php<br>
                    <br>
                    namespace Vendor\Package;<br>
                    <br>
                    class ClassName<br>
                    {<br>
                        public $foo = null;<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                4.3. методи
            </div>
            <div>
                <ul>
                    <li>
                        Область видимості ПОВИННА бути явно вказана для кожного методу.
                    </li>
                    <li>
                        Одиночний знак підкреслення на початку імені методу НЕ СЛІД використовувати як ознака захищеної
                        (<code>protected</code>) або приватній (<code>private</code>) області видимості.
                    </li>
                    <li>
                        Після імені методу НЕ ПОВИННО бути пробілу. Відкриває фігурна дужка ПОВИННА перебувати на
                        окремому рядку, а закриває фігурна дужка ПОВИННА перебувати на наступній за тілом методу рядку.
                        НЕ ПОВИННО бути пробілів після відкриває і перед закриває круглими дужками у визначенні методу.
                    </li>
                </ul>
                <p>
                    У загальному випадку визначення методу виглядає так. Зверніть увагу на круглі дужки, коми,
                    прогалини і фігурні дужки:
                </p>
                <code>
                    &lt;?php<br>
                    <br>
                    namespace Vendor\Package;<br>
                    <br>
                    class ClassName<br>
                    {<br>
                        public function fooBarBaz($arg1, &$arg2, $arg3 = [])<br>
                        {<br>
                            // тело метода<br>
                        }<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                4.4. аргументи методів
            </div>
            <div>
                <ul>
                    <li>
                        У списку аргументів НЕ ПОВИННО бути пробілу перед запитом, але ПОВИНЕН бути пробіл після
                        кожної коми.
                    </li>
                    <li>
                        Аргументи зі значеннями за замовчуванням ПОВИННІ розташовуватися в кінці списку
                        (після аргументів без значень за замовчуванням).
                        <i>{ Примітка перекладача: і тут справа не в красі, порушення цього правила може призвести до
                            цілком явних помилок виконання програми, коли аргументу без значення за замовчуванням «не
                            вистачить» значення при виклику методу. }</i><br>
                        <code>
                            &lt;?php<br>
                            <br>
                            namespace Vendor\Package;<br>
                            <br>
                            class ClassName<br>
                            {<br>
                                public function foo($arg1, &$arg2, $arg3 = [])<br>
                                {<br>
                                    // тело метода<br>
                                }<br>
                            }
                        </code>
                    </li>
                    <li>
                        Список аргументів МОЖЕ бути розділений на декілька рядків, кожен з яких доповнена зліва одним
                        відступом (чотирма пробілами). У такому випадку перший елемент списку аргументів ПОВИНЕН
                        починатися з нового рядка, і в кожному рядку ПОВИНЕН бути зазначений тільки один аргумент.
                    </li>
                    <li>
                        У разі, якщо список аргументів розділений на кілька рядків, що закриває кругла дужка і відкриває
                        фігурна дужка ПОВИННІ розташовуватися разом на своїй окремому рядку, а між ними повинен
                        бути один пробіл.<br>
                        <code>
                            &lt;?php<br>
                            <br>
                            namespace Vendor\Package;<br>
                            <br>
                            class ClassName<br>
                            {<br>
                                public function aVeryLongMethodName(<br>
                                    ClassTypeHint $arg1,<br>
                                    &$arg2,<br>
                                    array $arg3 = []<br>
                                ) {<br>
                                    // тело метода<br>
                                }<br>
                            }
                        </code>
                    </li>
                </ul>
            </div>

            <div class="h3" style="text-align: center">
                4.5. Ключові слова abstract, final і static
            </div>
            <div>
                <ul>
                    <li>
                        Ключові слова <code>abstract</code> і <code>final</code>, в разі їх наявності, ПОВИННІ
                        розташовуватися перед зазначенням області видимості.
                    </li>
                    <li>
                        Ключове слово <code>static</code>, в разі його наявності, ПОВИННО розташовуватися після
                        вказівки області видимості.
                    </li>
                </ul>
                <code>
                    &lt;?php<br>
                    <br>
                    namespace Vendor\Package;<br>
                    <br>
                    abstract class ClassName<br>
                    {<br>
                        protected static $foo;<br>
                    <br>
                        abstract protected function zim();<br>
                    <br>
                        final public static function bar()<br>
                        {<br>
                            // тело метода<br>
                        }<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                4.6. Виклики методів і функцій
            </div>
            <div>
                <p>
                    У коді виклику функцій і методів НЕ ПОВИННО бути пробілу між ім'ям функції або методу і відкриває
                    круглою дужкою, НЕ ПОВИННО бути пробілу після відкриває круглої дужки, НЕ ПОВИННО бути пробілу
                    перед закриває круглою дужкою. У списку аргументів НЕ ПОВИННО бути пробілів перед запитом, але
                    ПОВИНЕН бути пробіл після кожної коми.
                </p>
                <code>
                    &lt;?php<br>
                    bar();<br>
                    $foo->bar($arg1);<br>
                    Foo::bar($arg2, $arg3);
                </code>
                <p>
                    Список аргументів МОЖЕ бути розділений на декілька рядків, кожен з яких доповнена зліва одним
                    відступом (чотирма пробілами). У такому випадку перший елемент списку аргументів ПОВИНЕН
                    починатися з нового рядка, і в кожному рядку ПОВИНЕН бути зазначений тільки один аргумент.
                </p>
                <code>
                    &lt;?php<br>
                    $foo->bar(<br>
                        $longArgument,<br>
                        $longerArgument,<br>
                        $muchLongerArgument<br>
                    );
                </code>
            </div>
        </div>

        <div class="h2" style="text-align: center">
            5. Керуючі конструкції
        </div>
        <div>
            <p>
                Загальні правила оформлення керуючих конструкцій:
            </p>
            <ul>
                <li>
                    Після ключового слова, що визначає керуючу конструкцію, ПОВИНЕН бути один пробіл.
                </li>
                <li>
                    Після відкривають круглих дужок НЕ ПОВИННО бути пробілів.
                </li>
                <li>
                    Перед закривають круглими дужками НЕ ПОВИННО бути пробілів.
                </li>
                <li>
                    Між закриває круглою дужкою і відкриває фігурною дужкою ПОВИНЕН бути один пробіл.
                </li>
                <li>
                    Тіло конструкції ПОВИННО бути доповнено одним відступом (чотирма пробілами).
                </li>
                <li>
                    Закриває фігурна дужка ПОВИННА розташовуватися на наступному рядку після тіла конструкції.
                </li>
            </ul>
            <p>
                Тіло кожної керуючої конструкції ПОВИННО бути укладено в фігурні дужки. Це дозволяє стандартизувати
                зовнішній вигляд керуючих конструкцій з знизити ризик виникнення помилок при додаванні нових рядків
                в тіло конструкції.
            </p>

            <div class="h3" style="text-align: center">
                5.1. Конструкції if, elseif і else
            </div>
            <div>
                <p>
                    Конструкція <code>if</code> виглядає наступним чином. Зверніть увагу на круглі дужки, прогалини
                    і фігурні дужки, а також на той факт, що слова <code>else</code> і <code>elseif</code>
                    розташовуються в тому ж рядку, що і закриває фігурна дужка попереднього тіла конструкції
                </p>
                <code>
                    &lt;?php<br>
                    if ($expr1) {<br>
                        // тело if<br>
                    } elseif ($expr2) {<br>
                        // тело elseif<br>
                    } else {<br>
                        // тело else<br>
                    }
                </code>
                <p>
                    Ключове слово <code>elseif</code> СЛІД використовувати замість окремого поєднання
                    <code>else</code> і <code>if</code>. Так конструкція буде являти собою одне слово.
                </p>
            </div>

            <div class="h3" style="text-align: center">
                5.2. Конструкції switch і case
            </div>
            <div>
                <p>
                    Конструкція <code>switch</code> виглядає наступним чином. Зверніть увагу на круглі дужки,
                    прогалини і фігурні дужки. Вираз case ПОВИННО бути зміщений на один відступ (чотири пробілу)
                    від <code>switch</code>, а ключове слово <code>break</code> (або інше слово, що позначає вихід з
                    конструкції) ПОВИННО розташовуватися на тому ж рівні відступів, що і тіло case. У тому випадку,
                    коли в непорожньої тілі case навмисне не використовується <code>break</code>, ПОВИНЕН бути коментар
                    в стилі <code>// no break</code>.
                </p>
                <code>
                    &lt;?php<br>
                    switch ($expr) {<br>
                        case 0:<br>
                            echo 'First case, with a break';<br>
                            break;<br>
                        case 1:<br>
                            echo 'Second case, which falls through';<br>
                        // no break<br>
                        case 2:<br>
                        case 3:<br>
                        case 4:<br>
                            echo 'Third case, return instead of break';<br>
                            return;<br>
                        default:<br>
                            echo 'Default case';<br>
                            break;<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                5.3. Конструкції while і do while
            </div>
            <div>
                <p>
                    Конструкція <code>while</code> виглядає наступним чином. Зверніть увагу на круглі дужки,
                    прогалини і фігурні дужки.
                </p>
                <code>
                    &lt;?php<br>
                    while ($expr) {<br>
                        // тело конструкции<br>
                    }
                </code>
                <p>
                    Відповідно, конструкція <code>do while</code> виглядає наступним чином. Зверніть увагу на круглі
                    дужки, прогалини і фігурні дужки.
                </p>
                <code>
                    &lt;?php<br>
                    do {<br>
                        // тело конструкции<br>
                    } while ($expr)
                </code>
            </div>

            <div class="h3" style="text-align: center">
                5.4. конструкція for
            </div>
            <div>
                <p>
                    Конструкція <code>for</code> виглядає наступним чином. Зверніть увагу на круглі дужки,
                    прогалини і фігурні дужки.
                </p>
                <code>
                    &lt;?php<br>
                    for ($i = 0; $i < 10; $i++) {<br>
                        // тело for<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                5.5. конструкція foreach
            </div>
            <div>
                <p>
                    Конструкція <code>foreach</code> виглядає наступним чином. Зверніть увагу на круглі дужки,
                    прогалини і фігурні дужки.
                </p>
                <code>
                    &lt;?php<br>
                    foreach ($iterable as $key => $value) {<br>
                        // тело foreach<br>
                    }
                </code>
            </div>

            <div class="h3" style="text-align: center">
                5.6. Конструкція try catch
            </div>
            <div>
                <p>
                    Блоки конструкції <code>try catch</code> виглядають наступним чином. Зверніть увагу на круглі дужки,
                    прогалини і фігурні дужки.
                </p>
                <code>
                    &lt;?php<br>
                    try {<br>
                        // тело try<br>
                    } catch (FirstExceptionType $e) {<br>
                        // тело catch<br>
                    } catch (OtherExceptionType $e) {<br>
                        // тело catch<br>
                    }
                </code>
            </div>
        </div>

        <div class="h2" style="text-align: center">
            6. Замикання
        </div>
        <div>
            <ul>
                <li>
                    Замикання ПОВИННІ описуватися з використанням пробілу після ключового слова <code>function</code>
                    і пробілами до і після ключового слова <code>use</code>.
                </li>
                <li>
                    Відкриває фігурна дужка ПОВИННА розташовуватися на одному рядку з ім'ям замикання рядку, а
                    закриває фігурна дужка ПОВИННА розташовуватися на наступному рядку після тіла замикання.
                </li>
                <li>
                    Після відкриває круглої дужки і перед закриває круглою дужкою в списку аргументів або змінних
                    НЕ ПОВИННО бути пробілу.
                </li>
                <li>
                    У списку аргументів або змінних НЕ ПОВИННО бути пробілів перед запитом, але ПОВИНЕН бути один
                    пробіл після кожної коми.
                </li>
                <li>
                    Аргументи замикання зі значеннями за замовчуванням ПОВИННІ розташовуватися в кінці списку
                    (після аргументів без значень за замовчуванням). <i>{ Примітка перекладача: і тут справа не в
                        красі, порушення цього правила може призвести до цілком явних помилок виконання програми,
                        коли аргументу без значення за замовчуванням «не вистачить» значення при виклику. }</i>
                </li>
            </ul>
            <p>
                Опис замикання виглядає наступним чином. Зверніть увагу на круглі дужки, коми, прогалини і
                фігурні дужки.
            </p>
            <code>
                &lt;?php<br>
                $closureWithArgs = function ($arg1, $arg2) {<br>
                    // тело<br>
                };<br>
                <br>
                $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {<br>
                    // тело<br>
                };
            </code>
            <p>
                Список аргументів і змінних МОЖЕ бути розділений на декілька рядків, кожен з яких доповнена зліва
                одним відступом (чотирма пробілами). У такому випадку перший елемент списку ПОВИНЕН починатися з
                нового рядка, і в кожному рядку ПОВИНЕН бути зазначений тільки один елемент.
            </p>
            <p>
                Коли останній список (аргументів або змінних) розділений на кілька рядків, що закриває кругла дужка і
                відкриває фігурна дужка ПОВИННІ розташовуватися на одному рядку і бути розділені одним пропуском.
            </p>
            <p>
                Нижче представлені приклади замикань зі списком аргументів і без нього, а також зі списком змінних,
                розташованим на кількох рядках.
            </p>
            <code>
                &lt;?php<br>
                $longArgs_noVars = function (<br>
                    $longArgument,<br>
                    $longerArgument,<br>
                    $muchLongerArgument<br>
                ) {<br>
                    // тело<br>
                };<br>
                <br>
                $noArgs_longVars = function () use (<br>
                    $longVar1,<br>
                    $longerVar2,<br>
                    $muchLongerVar3<br>
                ) {<br>
                    // тело<br>
                };<br>
                <br>
                $longArgs_longVars = function (<br>
                    $longArgument,<br>
                    $longerArgument,<br>
                    $muchLongerArgument<br>
                ) use (<br>
                    $longVar1,<br>
                    $longerVar2,<br>
                    $muchLongerVar3<br>
                ) {<br>
                    // тело<br>
                };<br>
                <br>
                $longArgs_shortVars = function (<br>
                    $longArgument,<br>
                    $longerArgument,<br>
                    $muchLongerArgument<br>
                ) use ($var1) {<br>
                    // тело<br>
                };<br>
                <br>
                $shortArgs_longVars = function ($arg) use (<br>
                    $longVar1,<br>
                    $longerVar2,<br>
                    $muchLongerVar3<br>
                ) {<br>
                    // тело<br>
                };
            </code>
            <p>
                Зверніть увагу, що правила оформлення замикань також поширюються на випадок, коли замикання
                використовується як аргумент прямо у виклику функції або методу.
            </p>
            <code>
                &lt;?php<br>
                $foo->bar(<br>
                    $arg1,<br>
                    function ($arg2) use ($var1) {<br>
                        // тело<br>
                    },<br>
                    $arg3<br>
                );
            </code>
        </div>

        <div class="h2" style="text-align: center">
            7. Висновок
        </div>
        <div>
            <p>
                У цьому керівництві навмисно не розглянуті правила і кращі практики по оформленню багатьох елементів,
                список яких включає в себе, але не обмежується наступним:
            </p>
            <ul>
                <li>
                    Визначення глобальних змінних і констант.
                </li>
                <li>
                    Визначення функцій.
                </li>
                <li>
                    Використання операторів і присвоювання.
                </li>
                <li>
                    Міжстрококве вирівнювання.
                </li>
                <li>
                    Блоки коментарів і документації.
                </li>
                <li>
                    Префікси і суфікси в іменах класів
                </li>
                <li>
                    Кращі практики.
                </li>
            </ul>
            <p>
                У майбутньому дані рекомендації МОЖУТЬ бути переглянуті і розширені, щоб охопити ті чи інші елементи
                коду і практики оформлення.
            </p>
        </div>
    </div>

    <div class="row-fluid" style="text-align: center">
        <div class="span12">
            <div class="row-fluid">

                <div class="span6 btn btn-link">
                    <a href="psr1.php">
                        <button type="button">
                            <span class="glyphicon glyphicon-arrow-left"></span> Попередня сторінка
                        </button>
                    </a>
                </div>

                <div class="span6 btn btn-link">
                    <a href="psr4.php">
                        <button type="button" >
                            Наступна сторінка <span class="glyphicon glyphicon-arrow-right"></span>
                        </button>
                    </a>
                </div>

            </div>
        </div>
    </div>
</div>

<?php include_once("footer.php");